<?php

namespace App\Repository;

use App\Entity\SchduleEntity;

/**
 * ScheduleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ScheduleRepository extends \Doctrine\ORM\EntityRepository
{

    public function ajax_list(array $get, $userData){

      
        if(isset($userData['type']) && $userData['type'] != 'Client'){
            $columns = array(
                array( 'CONCAT(u.`first_name`, " ", u.`last_name`)','CONCAT(u.`first_name`, " ", u.`last_name`)', "client"),
                array('s.`schedule_type`', "s.`schedule_type`", "scheduleType"),
                array('s.`schedule_date`', 's.`schedule_date`', 'scheduleDate'),
                array('CONCAT(s.`start_time`, "-", s.`end_time` )', 'CONCAT(s.`start_time`, "-", s.`end_time` )', 'scheduleTime'),
                array('s.`calendar`', "s.`calendar`", 'interviewer'),
                array('s.`price`', "s.`price`", 'price'),
                array('s.`id`', "s.`id`"),
    
            );
        } else {

            $columns = array(
                array('s.`schedule_type`', "s.`schedule_type`", "scheduleType"),
                array('s.`schedule_date`', 's.`schedule_date`', 'scheduleDate'),
                array('CONCAT(s.`start_time`, "-", s.`end_time` )', 'CONCAT(s.`start_time`, "-", s.`end_time` )', 'scheduleTime'),
                array('s.`calendar`', "s.`calendar`", 'interviewer'),
                array('s.`price`', "s.`price`", 'price'),
                array('s.`id`', "s.`id`"),
    
            );
        }

        $asColumns = array();

        $select = "SELECT";
        $from = "FROM `schedule` s";
        $sqlWhere = " WHERE s.`is_deleted` = 0";
        $joins = " LEFT JOIN `user` u ON u.`id` = s.`user_id`";
        $groupBy = "";
        $orderBy = " ORDER BY s.`id` DESC";
        $limit = "";
        $stmtParams = array();

        foreach($columns as $key => $column) {
            $select .= ($key > 0 ? ', ' : ' ') . $column[1] . (isset($column[2]) ? ' AS ' . $column[2] : '');
        }

        if(isset($userData['type']) && $userData['type'] == 'Client'){
            $stmtParams['clientId'] = $userData['id'];
            $sqlWhere.= ' AND s.`user_id` = :clientId';
        }


        // /*
        //  * Ordering
        //  */
        // foreach($get['columns'] as $key => $column) {
        //     if($column['orderable']=='true') {
        //         if(isSet($get['order'])) {
        //             foreach($get['order'] as $order) {
        //                 if($order['column']==$key) {
        //                     $orderBy .= (!empty($orderBy) ? ', ' : 'ORDER BY ') . $columns[$key][0] . (!empty($order['dir']) ? ' ' . $order['dir'] : '');
        //                 }
        //             }
        //         }
        //     }
        // }

        /*
         * Filtering
         */
        if(isset($get['search']) && $get['search']['value'] != ''){
            $aLikes = array();
            foreach($get['columns'] as $key => $column) {
                if($column['searchable']=='true') {
                    $aLikes[] = $columns[$key][0] . ' LIKE :searchValue';
                }
            }
            foreach($asColumns as $asColumn) {
                $aLikes[] = $asColumn . ' LIKE :searchValue';
            }
            if(count($aLikes)) {
                $sqlWhere .= (!empty($sqlWhere) ? ' AND ' : 'WHERE ') . '(' . implode(' OR ', $aLikes) . ')';
                $stmtParams['searchValue'] = "%" . $get['search']['value'] . "%";
            }
        }

        /* Set Limit and Length */
        if(isset( $get['start'] ) && $get['length'] != '-1'){
            $limit = 'LIMIT ' . (int)$get['start'] . ',' . (int)$get['length'];
        }

        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
     

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result_count = $res->fetchAllAssociative();
        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy $limit";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        /* Data Count */
        $recordsTotal = count($result_count);

        /*
         * Output
         */
        $output = array(
            "draw" => intval($get['draw']),
            "recordsTotal" => $recordsTotal,
            "recordsFiltered" => $recordsTotal,
            "data" => array()
        );

        $url = $get['url'];
        $formUrl = '';
        foreach($result as $row) {

            $id = base64_encode($row['id']);
       

      

            if(isset($userData['type']) && $userData['type'] != 'Client'){

                $values = array(
                    $row['client'],
                    $row['scheduleType'],
                    $row['scheduleDate'],
                    $row['scheduleTime'],
                    $row['interviewer'],
                    $row['price'],
                    "<a href='/schedule/details/".base64_encode($row['id'])."' class='button action-button-success'>View</a>"
                );
                
            } else {
                $values = array(
                    $row['scheduleType'],
                    $row['scheduleDate'],
                    $row['scheduleTime'],
                    $row['interviewer'],
                    $row['price'],
                    "<a href='/schedule/details/".base64_encode($row['id'])."' class='button action-button-success'>View</a>"
                );
            }

            $output['data'][] = $values;
        }

        unset($result);

        return $output;
    }

   
   
}
