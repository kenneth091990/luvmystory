<?php

namespace App\Repository;

use App\Entity\SchduleEntity;

/**
 * StoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StoryRepository extends \Doctrine\ORM\EntityRepository
{

    public function ajax_list(array $get, $userData){

      
 

        $columns = array(
            array('sc.`schedule_type`', "sc.`schedule_type`", "storyType"),
            array('sc.`schedule_date`', "sc.`schedule_date`", "scheduleDate"),
            array('sc.`calendar`', "sc.`calendar`", 'interviewer'),
            array('s.`id`', "s.`id`"),
        );
        

        if(isset($get['status']) && $get['status'] == 'archive'){
            $sqlWhere = " WHERE s.`is_deleted` = 1 AND (s.`is_permanent_deleted` = 0 OR s.`is_permanent_deleted` IS NULL)";

        } else {
            $sqlWhere = " WHERE s.`is_deleted` = 0";

        }

        $asColumns = array();

        $select = "SELECT";
        $from = "FROM `story` s";
        $joins = " LEFT JOIN `schedule` sc ON sc.`id` = s.`schedule_id`";
        $joins .= " LEFT JOIN `user` u ON u.`id` = sc.`user_id`";
        $groupBy = "";
        $orderBy = " ORDER BY s.`id` DESC";
        $limit = "";
        $stmtParams = array();

        foreach($columns as $key => $column) {
            $select .= ($key > 0 ? ', ' : ' ') . $column[1] . (isset($column[2]) ? ' AS ' . $column[2] : '');
        }

        if(isset($userData['type']) && $userData['type'] == 'Client'){
            $stmtParams['clientId'] = $userData['id'];
            $sqlWhere.= ' AND sc.`user_id` = :clientId';
        }


        // /*
        //  * Ordering
        //  */
        // foreach($get['columns'] as $key => $column) {
        //     if($column['orderable']=='true') {
        //         if(isSet($get['order'])) {
        //             foreach($get['order'] as $order) {
        //                 if($order['column']==$key) {
        //                     $orderBy .= (!empty($orderBy) ? ', ' : 'ORDER BY ') . $columns[$key][0] . (!empty($order['dir']) ? ' ' . $order['dir'] : '');
        //                 }
        //             }
        //         }
        //     }
        // }

        /*
         * Filtering
         */
        if(isset($get['search']) && $get['search']['value'] != ''){
            $aLikes = array();
            foreach($get['columns'] as $key => $column) {
                if($column['searchable']=='true') {
                    $aLikes[] = $columns[$key][0] . ' LIKE :searchValue';
                }
            }
            foreach($asColumns as $asColumn) {
                $aLikes[] = $asColumn . ' LIKE :searchValue';
            }
            if(count($aLikes)) {
                $sqlWhere .= (!empty($sqlWhere) ? ' AND ' : 'WHERE ') . '(' . implode(' OR ', $aLikes) . ')';
                $stmtParams['searchValue'] = "%" . $get['search']['value'] . "%";
            }
        }

        /* Set Limit and Length */
        if(isset( $get['start'] ) && $get['length'] != '-1'){
            $limit = 'LIMIT ' . (int)$get['start'] . ',' . (int)$get['length'];
        }

        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
     

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result_count = $res->fetchAllAssociative();
        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy $limit";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        /* Data Count */
        $recordsTotal = count($result_count);

        /*
         * Output
         */
        $output = array(
            "draw" => intval($get['draw']),
            "recordsTotal" => $recordsTotal,
            "recordsFiltered" => $recordsTotal,
            "data" => array()
        );

        $url = $get['url'];
        $formUrl = '';
        foreach($result as $row) {

            $id = base64_encode($row['id']);
  
            $values = array(
                "<p data-label='Story Title'>" . $row['storyType'] ."</p>",
                "<p data-label='Created'>" .$row['scheduleDate'] ."</p>",
                "<p data-label='Interviewer'>" .$row['interviewer'] ."</p>",
                '<div class="action-container">
                    <a href="javascript:void(0);" class="action-btn" data-id="'.$id.'" data-action="restore" >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="13.714" viewBox="0 0 16 13.714"><path d="M10.643,4.5a6.858,6.858,0,0,0-6.857,6.857H1.5l2.964,2.964.053.107L7.6,11.357H5.31a5.359,5.359,0,1,1,1.57,3.764L5.8,16.2A6.855,6.855,0,1,0,10.643,4.5ZM9.881,8.31v3.81l3.261,1.935.549-.922-2.667-1.585V8.31Z" transform="translate(-1.5 -4.5)" opacity="1"/></svg>
                    </a>
                    <a href="javascript:void(0);" class="action-btn" data-id="'.$id.'" data-action="permanent-delete">
                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><path d="M13.5,1H9.75L9.456.416A.75.75,0,0,0,8.784,0H5.212a.741.741,0,0,0-.669.416L4.25,1H.5a.5.5,0,0,0-.5.5v1A.5.5,0,0,0,.5,3h13a.5.5,0,0,0,.5-.5v-1A.5.5,0,0,0,13.5,1ZM1.662,14.594A1.5,1.5,0,0,0,3.159,16h7.681a1.5,1.5,0,0,0,1.5-1.406L13,4H1Z" transform="translate(0 0)" opacity="1"/></svg>
                    </a>
                </div>'
            );
            
        
            $output['data'][] = $values;
        }

        unset($result);

        return $output;
    }

    public function comment_ajax_list(string $id, $userData) {

       
        $limit = "LIMIT 0,20";
        $query = $this->getEntityManager()->getConnection()->prepare("
            SELECT
                CASE 
                    WHEN
                         c.`user_id` IS NOT NULL THEN CONCAT(u.`first_name`, ' ', u.`last_name`)
                    ELSE 
                        CONCAT(c.`guest_name`, '(' , c.`email` , ')')
                    END AS commentUser,
                CASE 
                    WHEN
                         u.`profile_photo_desc` IS NOT NULL THEN CONCAT('/uploads/profile_photo/', u.`parsed_profile_photo_desc`)
                    ELSE 
                        '/assets/img/default-profile-pic.jpg'
                    END AS profilePic,   
                c.`message`,
               DATE_FORMAT(c.`created_at`, '%Y-%m-%d H:i:s') AS createdAt    
            FROM `comment` c
            LEFT JOIN `user` u ON u.`id` = c.`user_id`
            WHERE c.`is_deleted` != 1
            AND c.`story_id` = ".$id."
            ORDER BY c.`created_at` DESC
            ".$limit."
        ");

  
       
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();
        return $result;
    }

    public function getLikeCtr(string $id) {

        $id = base64_decode($id);
        $query = $this->getEntityManager()->getConnection()->prepare("
            SELECT
                COUNT(sl.`id`) AS ctr,
                sli.likers,
                sli.photos
            FROM `story_like` sl
            LEFT JOIN (
                SELECT 
                    GROUP_CONCAT(CONCAT(u.`first_name` , ' ', u.`last_name`)) AS likers,
                    GROUP_CONCAT(u.`parsed_profile_photo_desc`) AS photos,
                    sli.`story_id`
                FROM `story_like` sli
                LEFT JOIN `user` u ON u.`id` =  sli.`user_id`
                WHERE (sli.`is_deleted` != 1 OR sli.`is_deleted` IS NULL)
                GROUP BY sli.`story_id`
            ) sli ON sli.`story_id` = ".$id."
            WHERE (sl.`is_deleted` != 1 OR sl.`is_deleted` IS NULL)
            AND sl.`story_id` = ".$id."
        ");

  
       
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        $result = ($result ? ($result[0] != NULL ? $result[0] : 0) : 0);
        return $result;
    }

    public function getCommentCtr(string $id) {

        $id = base64_decode($id);
        $query = $this->getEntityManager()->getConnection()->prepare("
            SELECT
                COUNT(c.`id`) AS ctr
            FROM `comment` c
            WHERE (c.`is_deleted` != 1 OR c.`is_deleted` IS NULL)
            AND c.`story_id` = ".$id."
        ");

  
       
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();
        $result = ($result ? ($result[0]['ctr'] != NULL ? $result[0]['ctr'] : 0) : 0);
        return $result;
    }

    public function getPageList($userData, $q){

        $orderBy = '';
        $andWhere = '';
        
        if(isset($q['orderBy'])){
            if($q['orderBy'] == 'date'){
                $orderBy .= "ORDER BY sc.`date_created` DESC"; 
            } else {
                $orderBy .= "ORDER BY sc.`schedule_type` ASC";
            }
        }

        if(isset($q['ids']) && !empty($q['ids'])){
           $andWhere .= ' AND s.`id` NOT IN  (' . $q["ids"]. ')';
        }

        if(isset($q['isPublic']) && $q['isPublic'] == 'true'){
            $andWhere .= ' AND s.`is_public` = 1';

            if(isset($q['profile']) && $q['profile'] != ''){
                $andWhere .= ' AND sc.`user_id` = '. base64_decode($q['profile']);

            }
        }

        if(isset($q['q']) && $q['q'] != ''){
            $andWhere .= ' AND (s.`title` LIKE "%'.$q['q'].'%" OR CONCAT(u.`first_name` , " ", u.`last_name`) LIKE "%'.$q['q'].'%" )';
        }


        if(isset($q['page']) && in_array($q['page'], ['teller' , 'my_story'])){

            if($q['page'] == 'my_story'){
                $andWhere .= "  AND (
                    sc.`user_id` = ".$userData['id']." 
                 )";
            } else {
                $andWhere .= ' AND sc.`user_id` = '. base64_decode($q['profile']);
            }
         
        } else {


            if(isset($q['filterBy']) && $q['filterBy'] != 'all'){

                if($q['filterBy'] == 'only_shared_story' ){
                    $andWhere .= "  AND 
                           s.`id` IN (
                            SELECT 
                                GROUP_CONCAT(ss.`story_id`)
                            FROM `share_story` ss
                            LEFT JOIN `story` s ON s.`id` = ss.`story_id`
                            LEFT JOIN `schedule` sc ON sc.`id` = s.`schedule_id`
                            WHERE s.`is_public` = 1 
                            AND ss.`user_id` = ".$userData['id']." 
                            GROUP BY ss.`user_id` 
                        )
                    ";
    
                } else {
                    $andWhere .= "  AND (
                            sc.`user_id` = ".$userData['id']." 
                    )";
                }
              
            }
        }

     

        $query = $this->getEntityManager()->getConnection()->prepare("
            SELECT
                s.`parsed_file_desc` AS storyImg,
                s.`title` AS storyTitle,
                DATE_FORMAT(sc.`date_created`, '%b %d, %Y ') AS createdDate,
                s.`id` AS storyId,
                s.`is_public` AS isPublic,
                sv.storyViewCtr AS storyViewCtr,
                (CASE
                    WHEN sc.`user_id` !=  ".$userData['id']."  THEN 1
                    ELSE 0
                END) AS isShared
            FROM `story` s
            LEFT JOIN `schedule` sc ON sc.`id` = s.`schedule_id`
            LEFT JOIN `user` u ON u.`id` = sc.`user_id`
            LEFT JOIN (
                SELECT 
                    sv.`story_id`,
                    COUNT(sv.`id`) AS storyViewCtr
                FROM `story_view` sv
                GROUP BY sv.`story_id`
            ) sv ON sv.`story_id` = s.`id`
            WHERE   (s.`is_deleted` != 1 OR s.`is_deleted` IS NULL)
            ".$andWhere."
            ".$orderBy."
            LIMIT 6
        ");


       
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();
    
        return $result;
    }


   
   
}
