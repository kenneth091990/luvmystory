<?php

namespace App\Repository;

use App\Entity\UserEntity;

/**
 * USerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{

    public function validate_registration($registration_form) {

        $errors = array();

        $userExist = $this->getEntityManager()->getRepository(UserEntity::class)
            ->createQueryBuilder('u')
            ->where('u.email = :email')
            ->setParameters(array(
                'email' => $registration_form['email']
            ))
            ->getQuery()->getResult();

      

        if(empty($registration_form['email'])){
            $errors[] = 'You must tell us your email address.';
        } else {

            if(!filter_var($registration_form['email'], FILTER_VALIDATE_EMAIL) && preg_match('/@.+\./', $registration_form['email'])){

                 $errors[] = 'You must provide  a valid email address.';
            } else {
               
                if($userExist) {
                    $errors[] = 'email already exist.';
                }
            }
        }

        if(empty($registration_form['last_name'])) {
            $errors[] = 'Last name should not be blank.';
        }

        if( empty($registration_form['password']['first']) && empty($registration_form['password']['second'])) {
            $errors[] = 'Please enter your password.';
        } else if($registration_form['password']['first'] !== $registration_form['password']['second']) {
            $errors[] = 'Password does not match.';
        }

        if(empty($registration_form['first_name'])) {
            $errors[] = 'First name should not be blank.';
        }

        if(empty($registration_form['last_name'])) {
            $errors[] = 'Last name should not be blank.';
        }

        return $errors;
    }

    public function validate_profile_form($profile_form) {

        $errors = array();

        if(empty($profile_form['last_name'])) {
            $errors[] = 'Last name should not be blank.';
        }



        if(empty($profile_form['first_name'])) {
            $errors[] = 'First name should not be blank.';
        }

        if(empty($profile_form['last_name'])) {
            $errors[] = 'Last name should not be blank.';
        }

        return $errors;
    }

    public function validate($user_form) {

        $errors = array();
    
        $action = $user_form['action'];
    
        // d = delete
        if($action !== 'd') {
    
            $userExist = $this->getEntityManager()->getRepository(UserEntity::class)
                ->createQueryBuilder('u')
                ->where('u.id != :id')
                ->andWhere('u.email = :email')
                ->setParameters(array(
                    'id' => $user_form['id'],
                    'email' => $user_form['email']
                ))
                ->getQuery()->getResult();
    
            if($userExist) {
                $errors[] = 'Email already exist.';
            }
    
    
            if($action === 'n' && empty($user_form['password']['first']) && empty($user_form['password']['second'])) {
                $errors[] = 'Please enter your password.';
            } else if($user_form['password']['first'] !== $user_form['password']['second']) {
                $errors[] = 'Password does not match.';
            }
    
            if(empty($user_form['first_name'])) {
                $errors[] = 'First name should not be blank.';
            }
    
            if(empty($user_form['last_name'])) {
                $errors[] = 'Last name should not be blank.';
            }
    
            if(!empty($user_form['email']) && !(filter_var($user_form['email'], FILTER_VALIDATE_EMAIL) && preg_match('/@.+\./', $user_form['email']))) {
                $errors[] = 'Email address is invalid.';
            }
        }
    
        return $errors;
    }

    public function validateUpdatePassword($form){
        
        $errors = [];
        if( empty($form['password']['first']) && empty($form['password']['second'])) {
            $errors[] = 'Please enter your password.';
        } else if($form['password']['first'] !== $form['password']['second']) {
            $errors[] = 'Password does not match.';
        }

        return $errors;
    }


    public function ajax_list(array $get, $userData){

        $columns = array(
            array('u.`first_name`', "CONCAT(u.`first_name`, ' ', u.`last_name`)", 'fullName'),
            array('u.`type`', 'u.`type`', 'userType'),
            array('u.`email`', 'u.`email`', 'email'),
            array('u.`id`', "u.`id`")
        );
        $asColumns = array();

        $select = "SELECT";
        $from = "FROM `user` u";
        $sqlWhere = " WHERE u.`type`  NOT IN ('Super Admin')";
        $joins = " ";
        $groupBy = "";
        $orderBy = "";
        $limit = "";
        $stmtParams = array();

        foreach($columns as $key => $column) {
            $select .= ($key > 0 ? ', ' : ' ') . $column[1] . (isset($column[2]) ? ' AS ' . $column[2] : '');
        }

        /*
         * Ordering
         */
        foreach($get['columns'] as $key => $column) {
            if($column['orderable']=='true') {
                if(isSet($get['order'])) {
                    foreach($get['order'] as $order) {
                        if($order['column']==$key) {
                            $orderBy .= (!empty($orderBy) ? ', ' : 'ORDER BY ') . $columns[$key][0] . (!empty($order['dir']) ? ' ' . $order['dir'] : '');
                        }
                    }
                }
            }
        }

        /*
         * Filtering
         */
        if(isset($get['search']) && $get['search']['value'] != ''){
            $aLikes = array();
            foreach($get['columns'] as $key => $column) {
                if($column['searchable']=='true') {
                    $aLikes[] = $columns[$key][0] . ' LIKE :searchValue';
                }
            }
            foreach($asColumns as $asColumn) {
                $aLikes[] = $asColumn . ' LIKE :searchValue';
            }
            if(count($aLikes)) {
                $sqlWhere .= (!empty($sqlWhere) ? ' AND ' : 'WHERE ') . '(' . implode(' OR ', $aLikes) . ')';
                $stmtParams['searchValue'] = "%" . $get['search']['value'] . "%";
            }
        }

        /* Set Limit and Length */
        if(isset( $get['start'] ) && $get['length'] != '-1'){
            $limit = 'LIMIT ' . (int)$get['start'] . ',' . (int)$get['length'];
        }

        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
     

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result_count = $res->fetchAllAssociative();
        $sql = "$select $from $joins $sqlWhere $groupBy $orderBy $limit";
        $query = $this->getEntityManager()->getConnection()->prepare($sql);
        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();

        /* Data Count */
        $recordsTotal = count($result_count);

        /*
         * Output
         */
        $output = array(
            "draw" => intval($get['draw']),
            "recordsTotal" => $recordsTotal,
            "recordsFiltered" => $recordsTotal,
            "data" => array()
        );

        $url = $get['url'];
        $formUrl = '';
        $hasUpdate = false;
        if($userData['type'] == 'Super Admin' ){

            $formUrl = $url . '/user/form';  
            $hasUpdate = true;
        }

        foreach($result as $row) {

            $id = base64_encode($row['id']);

            $action = $hasUpdate ? "<a class='action-button-style btn btn-primary' href='$formUrl/u/$id'>Update</a>" : "";

            $values = array(
                $row['fullName'],
                $row['userType'],
                $row['email'],
                $action
            );

            $output['data'][] = $values;
        }

        unset($result);

        return $output;
    }

    public function autocompleteSuggestions($q, $userData) {

        $stmtParams = array(
            'q' => "%" . $q['query'] . "%"
        );

        $query = $this->getEntityManager()->getConnection()->prepare("
            SELECT
                u.`id`,
                CONCAT(u.`first_name`, ' ', u.`last_name`, ' (', u.`email`,')') AS data,
                CONCAT(u.`first_name`, ' ', u.`last_name`, ' (', u.`email`,')') AS value
            FROM `user` u
            WHERE u.`is_deleted` != 1
            AND CONCAT(u.`first_name`, ' ', u.`last_name`) LIKE :q
            AND u.`id` != ".$userData['id']."
            AND u.`type` NOT IN ('Admin', 'Super Admin')
            ORDER BY u.`first_name`
            LIMIT 0,20
        ");

        foreach($stmtParams as $k => $v){
            $query->bindValue($k, $v);

        }
       
        $res = $query->executeQuery();
        $result = $res->fetchAllAssociative();
        return $result;
    }

   
}
